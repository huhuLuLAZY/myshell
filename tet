#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <signal.h>
#include <libgen.h>

#define FALSE 0
#define TRUE 1
#define LINEMAX 80
#define ARGMAX 16
#define BUFSIZE 512
#define HISTMAX 500

/* file static variables */
static char input[LINEMAX] = {'\0'};
static char *args[ARGMAX] = {NULL};
static int return_value = 0;    
static char *hist[HISTMAX] = {NULL};

/* prototypes for file static functions */
static int get_args(char *);    // parse the input to get args
static void free_hist(char **);    // free the memory of hist
static void free_args(char **);    // free the memory of args
static void built_in(int, char **);    // mysh built-in commands

/* prototypes for extern functions */
int pwd1(void);
int cd1(char **);
int echo1(int, char **, int);
int cat1(int, char **);
int ls1(int, char **);
int mkdir1(int, char **);
int rmdir1(int, char **);
int rm1(int, char **);
int date1(void);
int chmod1(int, char **);
int wc1(int, char **);
int history1(char **);
int who1(int, char **);
int help1(void);    // list the commands that mysh supports
void exit1(void);
int kill1(int, char**);


int main(void)
{
    help1();
    int pipefd[2];    // pipe (IPC): child process passes the return_value to parent process
    char pipech;    // represent the return_value, 0 or 1
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    char *prompt = NULL;
    char hostname[32] = {'\0'};
    gethostname(hostname, (size_t)32);//得到主机名

    uid_t uid;
    prompt = (uid = getuid()) == 0 ? "# " : "$ ";   
 // getuid()用来取得执行目前进程的用户识别码
    setuid(uid);//setuid函数设置实际用户ID和有效用户ID。
    setgid(getgid());//getgid()用来取得执行目前进程的组识别码。

    int hist_count = 0;
    int same_command = FALSE;

    /* main loop */
    while (1) {
        /* ignore SIGINT (Ctrl-C), SIGQUIT (Ctrl-\) and
SIGTSTP (Ctrl-Z) */
        if (signal(SIGINT, SIG_IGN) == SIG_ERR) {
            fprintf(stderr, "Cannot ignore SIGINT!\n");
            exit(EXIT_FAILURE);
        }
        if (signal(SIGQUIT, SIG_IGN) == SIG_ERR) {
            fprintf(stderr, "Cannot ignore SIGQUIT!\n");
            exit(EXIT_FAILURE);
        }
        if (signal(SIGTSTP, SIG_IGN) == SIG_ERR) {
            fprintf(stderr, "Cannot ignore SIGTSTP!\n");
            exit(EXIT_FAILURE);
        }

        /* print the prompt 获得当前目录 */
        char *pwd = getcwd(NULL, 0);
        char *tmp = strdup(pwd);
        printf("[%s@%s:%s] %s", getenv("USER"), hostname, basename(tmp), prompt);
        free(pwd);

        /* Ctrl-D to exit */
        int ch = fgetc(stdin);
        if (ch == EOF) {
            free_hist(hist);
            putchar(10);
             exit1();
        }
        else    // if the first char is not EOF, then put it back into the STDIN stream
            ungetc(ch, stdin);

        /* get input, add to history and parse args 获取历史输入 */
        fgets(input, LINEMAX, stdin);

        if (hist_count > 0 && strcmp(hist[hist_count - 1], input) == 0)    // ignore successive same commands
            same_command = TRUE;
        else
            same_command = FALSE;
        if (!same_command) {
            hist[hist_count] = malloc((strlen(input) + 1) * sizeof(char));
            if (!hist[hist_count]) {
                perror("malloc");
                exit(EXIT_FAILURE);
            }
            strcpy(hist[hist_count], input);
            ++hist_count;
        }

        int argc = get_args(input);    // argc is the number of arguments (including the command itself)

        /* run the command */
        pid_t pid;
        if (args[0]) {
            // if the command doesn't start with '-' or '.', then it's a built-in command, otherwise fork and execvp
            if (args[0][0] != '-' && args[0][0] != '.')
                built_in(argc, args);
            else if ((pid = fork()) < 0) {    // if fork fails
                perror("fork");
                exit(EXIT_FAILURE);
            }
            else if (pid == 0) {    // child process
                close(pipefd[0]);    // close unused read end of pipe

                if (args[0][0] == '-') {    // call Bash commands
                    if (execvp(&args[0][1], args) == -1) {    // &args[0][1]: excluding the preceding '-'
                        write(pipefd[1], "1", 1);
                        close(pipefd[1]);          // reader will see EOF
                        fprintf(stderr, "bash: %s: command not found\n", &args[0][1]);
                        _exit(EXIT_FAILURE);    // exit() is unreliable here, so _exit must be used
                    }
                    else {
                        write(pipefd[1], "0", 1);
                        close(pipefd[1]);
                    }
                }
                else if (args[0][0] == '.') {    // user's program ("./<program name>")
                    if (execvp(args[0], args) == -1) {
                        write(pipefd[1], "1", 1);
                        close(pipefd[1]);          // reader will see EOF
                        fprintf(stderr, "bash: %s: command not found\n", args[0]);
                        _exit(EXIT_FAILURE);    // exit() is unreliable here, so _exit must be used
                    }
                    else {
                        write(pipefd[1], "0", 1);
                        close(pipefd[1]);
                    }
                }

                _exit(EXIT_SUCCESS);
            }
            else {    // pid > 0: parent process
                close(pipefd[1]);    // close unused write end of pipe
                read(pipefd[0], &pipech, 1);
                close(pipefd[0]);

                return_value = (pipech == '1') ? -1 : 0;

                wait(0);    // wait for child
            }
        }

        free_args(args);
    }    // end while (1)

    return 0;
}

static int get_args(char *input)
{
    int i = 0, j;

    if (!input)
        return 0;

    while (1) {
        while (*input == ' ')    // omit the preceding blank(s)
            input++;

        if (*input == '\n')    // only support one-line command
            break;

        if ((args[i] = malloc(LINEMAX * sizeof(char))) == NULL) {    // if malloc fails
            free_args(args);
            return 0;
        }

        j = 0;
        while (j < LINEMAX - 1 && *input != ' ' && *input != '\n')    // suppose arguments are split by blank(s)
            args[i][j++] = *input++;
        args[i][j] = '\0';    // terminate each argument with '\0'

        i++;
        if (i > ARGMAX - 1) {    // too many args
            free_args(args);
            return 0;
        }
    }

    return i;    // return the number of arguments
}

static void free_hist(char **hist)
{
    int i;
    for (i = 0; hist[i] != NULL; i++) {
        free(hist[i]);
        hist[i] = NULL;
    }
}

static void free_args(char **args)
{
    int i;
    for (i = 0; i < ARGMAX; i++)
        if (args[i]) {
            free(args[i]);
            args[i] = NULL;
        }
}

static void built_in(int argc, char **args)
{
    if (strcmp(args[0], "help") == 0)
        return_value = help1();
    else if (strcmp(args[0], "exit") == 0) {
        free_args(args);
        free_hist(hist);
         exit1();
    }
    else if (strcmp(args[0], "pwd") == 0)
        return_value = pwd1();
    else if (strcmp(args[0], "cd") == 0)
        return_value = cd1(args);
    else if (strcmp(args[0], "echo") == 0)
        return_value = echo1(argc, args, return_value);
    else if (strcmp(args[0], "cat") == 0)
        return_value = cat1(argc, args);
    else if (strcmp(args[0], "ls") == 0)
        return_value = ls1(argc, args);
    else if (strcmp(args[0], "mkdir") == 0)
        return_value =  mkdir1(argc, args);
    else if (strcmp(args[0], "rmdir") == 0)
        return_value =  rmdir1(argc, args);
    else if (strcmp(args[0], "rm") == 0)
        return_value = rm1(argc, args);
    else if (strcmp(args[0], "date") == 0)
        return_value = date1();
    else if (strcmp(args[0], "chmod") == 0)
        return_value =  chmod1(argc, args);
    else if (strcmp(args[0], "wc") == 0)
        return_value = wc1(argc, args);
    else if (strcmp(args[0], "history") == 0)
        return_value = history1(hist);
    else if (strcmp(args[0], "who") == 0)
        return_value = who1(argc, args);
	else if (strcmp(args[0], "kill") == 0)
		return_value =  kill1(argc, args);
    else {
        // if the command isn't built-in, then try execvp next time
        printf("mysh: %s: command not found...(try '-%s')\n", args[0], args[0]);
        return_value = -1;
    }
}
